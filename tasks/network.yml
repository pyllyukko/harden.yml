---

# TCP wrappers
- name: Install TCP wrappers library and nftables (Debian)
  when: ansible_distribution == "Debian" or ansible_distribution == "Kali" or ansible_distribution == "Ubuntu"
  become: true
  ansible.builtin.apt:
    update_cache: true
    pkg:
      - libwrap0
      - nftables
  tags:
    - packages
    - network
    - firewall
    - services
    - debian
- name: 'TCP wrappers: create /etc/hosts.allow'
  become: true
  ansible.builtin.template:
    src: "{{ playbook_dir }}/templates/hosts.allow.j2"
    dest: /etc/hosts.allow
    owner: root
    group: root
    mode: '0644'
    backup: true
  tags: network
- name: 'TCP wrappers: create /etc/hosts.deny'
  become: true
  ansible.builtin.copy:
    src: hosts.deny.new
    dest: /etc/hosts.deny
    owner: root
    group: root
    mode: '0644'
    backup: true
  tags: network
# </TCP wrappers>

# Slackware firewall
- name: Stat /etc/rc.d/rc.firewall (Slackware)
  ansible.builtin.stat:
    path: /etc/rc.d/rc.firewall
  register: stat_result
  become: true
  when: ansible_distribution == "Slackware"
  tags:
    - services
    - network
    - firewall
    - slackware
    - check
- name: Firewall for Slackware
  become: true
  when: ansible_distribution == "Slackware" and not stat_result.stat.exists
  tags:
    - network
    - firewall
    - slackware
  block:
    - name: Install nftables (Slackware)
      community.general.slackpkg:
        name: '{{ item }}'
        state: present
        update_cache: true
      with_items:
        - nftables
        - jansson
        - libnftnl
        - libmnl
        - libpcap
        - libnl3
        - dbus
        - elogind
      tags:
        - packages
        - slackware
    # https://wiki.nftables.org/wiki-nftables/index.php/Simple_ruleset_for_a_workstation
    # https://wiki.nftables.org/wiki-nftables/index.php/Simple_ruleset_for_a_server
    # The backup=true isn't really necessary here, as it won't be touched if it exists,
    # but we'll leave it here just in case and if the logic will be changed at some point :)
    - name: Create /etc/rc.d/rc.firewall (Slackware)
      ansible.builtin.template:
        src: "{{ playbook_dir }}/templates/rc.firewall-nft.j2"
        dest: /etc/rc.d/rc.firewall
        mode: '0700'
        backup: true
      tags:
        - services
        - slackware
    - name: Start Slackware firewall
      changed_when: true
      ansible.builtin.command: /etc/rc.d/rc.firewall start
      tags:
        - services
        - slackware
- name: Enable Slackware firewall
  when: ansible_distribution == "Slackware" and stat_result.stat.exists and not stat_result.stat.xusr
  ansible.builtin.file:
    path: /etc/rc.d/rc.firewall
    mode: '0700'
    owner: root
    group: root
  tags:
    - services
    - network
    - firewall
    - slackware
# </Slackware firewall>

# Debian firewall
- name: Firewall for Debian
  tags:
    - firewall
    - network
    - debian
  become: true
  when: ansible_distribution == "Debian" or ansible_distribution == "Kali" or ansible_distribution == "Ubuntu"
  block:
    - name: Copy nftables.conf
      ansible.builtin.template:
        src: nftables.conf.j2
        dest: /etc/nftables.conf
        mode: '0600'
        backup: true
      tags: configuration
    - name: Activate firewall
      ansible.builtin.command: /usr/sbin/nft -f /etc/nftables.conf
      changed_when: true
    # https://wiki.debian.org/nftables#nftables_in_Debian_the_easy_way
    - name: Enable nftables
      tags: services
      ansible.builtin.systemd:
        name: nftables
        state: started
        enabled: true
# </Debian firewall>

# ANSSI-BP-028 R13 - Disabling IPv6
- name: IPv6
  become: true
  tags:
    - network
    - configuration
    - ipv6
    - kernel
  block:
    - name: Blacklist IPv6 kernel module
      ansible.builtin.copy:
        src: modprobe.d/ipv6.conf.new
        dest: /etc/modprobe.d/ipv6.conf
        owner: root
        group: root
        mode: '0600'
    - name: Set ipv6.disable=1 in /boot/firmware/cmdline.txt (Raspberry Pi OS)
      ansible.builtin.replace:
        path: /boot/firmware/cmdline.txt
        regexp: '^(.(?!.*\bipv6\.disable=1\b).*)$'
        replace: '\1 ipv6.disable=1'
      when: ansible_distribution == "Debian"
      tags: debian
      register: result
      failed_when:
        - result.failed == true
        - '"does not exist !" not in result.msg'
    - name: Set ipv6.disable=1 in /etc/default/grub
      ansible.builtin.replace:
        path: /etc/default/grub
        regexp: '^(GRUB_CMDLINE_LINUX="(?!.*\bipv6\.disable=1\b).*)"$'
        replace: '\1 ipv6.disable=1"'
      when: ansible_distribution == "Debian" or ansible_distribution == "Kali" or ansible_os_family == "RedHat"
      notify: "Run update-grub"
      register: result
      failed_when:
        - result.failed == true
        - '"does not exist !" not in result.msg'

# https://www.networkmanager.dev/docs/api/latest/NetworkManager.conf.html
# https://blogs.gnome.org/lkundrak/2015/12/03/networkmanager-and-privacy-in-the-ipv6-internet/
#
# TODO:
#   * Loop through all connections of type wifi & ethernet and set:
#       * ipv6.method
#       * ignore-auto-routes (https://github.com/leviathansecurity/TunnelVision)
- name: NetworkManager
  tags:
    - network
    - networkmanager
    - ipv6
  become: true
  block:
    - name: Configure NetworkManager
      ansible.builtin.copy:
        dest: /etc/NetworkManager/conf.d/99-harden.conf
        owner: root
        group: root
        mode: '0644'
        content: |
          [connection]
          ipv4.dhcp-send-hostname=false
          ipv6.dhcp-send-hostname=false
          ipv6.ip6-privacy=2

          [device-wifi]
          match-device=type:wifi
          wifi.scan-rand-mac-address=yes
    # See https://github.com/leviathansecurity/TunnelVision
    # NOTE: This doesn't work for the very first time the connection is activated with the dispatcher, but only after that
    #- name: Create NetworkManager dispatcher that sets ignore-auto-routes
    #  ansible.builtin.copy:
    #    dest: /etc/NetworkManager/dispatcher.d/pre-up.d/nm-configure-connection.sh
    #    src: nm-configure-connection.sh
    #    owner: root
    #    group: root
    #    mode: '0755'
    - name: Configure NM connections
      block:
        - name: List all NetworkManager connections
          ansible.builtin.command: /usr/bin/nmcli -t -f NAME,TYPE connection show
          register: nm_connections
          changed_when: false
        - name: Build a connection list for WiFi and ethernet
          set_fact:
            filtered_nm_connections: >-
              {{
                nm_connections.stdout_lines
                | map('split', ':')
                | selectattr('1', 'in', ['802-11-wireless', '802-3-ethernet'])
                | map('first')
                | list
              }}
        - name: Configure NetworkManager connections
          community.general.nmcli:
            conn_name: "{{ item }}"
            state: present
            #gw4_ignore_auto: true
            #gw6_ignore_auto: true
            method6: disabled
          with_items: "{{ filtered_nm_connections }}"
