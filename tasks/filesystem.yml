---
- name: Slackware hidepid=2
  become: true
  when: ansible_distribution == "Slackware"
  tags:
    - slackware
    - hidepid
  block:
    - name: getent group polkitd
      ansible.builtin.getent:
        database: group
        key: polkitd
      tags: check
    - name: Fix /etc/rc.d/rc.S to mount /proc with hidepid=2 (Slackware)
      ansible.builtin.replace:
        path: /etc/rc.d/rc.S
        regexp: '^(\s*/sbin/mount -v proc /proc -n -t proc).*$'
        replace: '\g<1> -o hidepid=2,gid={{ getent_group.polkitd[1] }} 2> /dev/null'
        validate: '/bin/grep "^\s*/sbin/mount -v proc /proc -n -t proc -o hidepid=2,gid={{ getent_group.polkitd[1] }} 2> /dev/null$" %s'
        backup: true
      tags: configuration
    - name: Fix mkinitrd so initrd image uses hardened mount options for /proc and /dev
      ansible.builtin.blockinfile:
        path: /sbin/mkinitrd
        insertbefore: '# Wrap the initrd as an initramfs image and move it into place:$'
        block: |
          sed -i 's:^\(mount -n proc /proc -t proc\)$:\1 -o hidepid=2,gid={{ getent_group.polkitd[1] }}:' "${SOURCE_TREE}/init"
          sed -i 's:^\(\s\+mount -n devtmpfs /dev -t devtmpfs -o size=[0-9]\+M\)$:\1,noexec,nosuid:' "${SOURCE_TREE}/init"
          sed -i '/^mount -n tmpfs \/run -t tmpfs -o mode=0755,size=[0-9]\+M,nodev,nosuid,noexec$/amount --make-shared /run' "${SOURCE_TREE}/init"
      tags: configuration
      register: result
      failed_when:
        - result.failed
        - result.msg != "Path /sbin/mkinitrd does not exist !"
#- name: Remount /proc with hidepid=2
#  become: true
#  mount:
#    path: /proc
#    opts: hidepid=2
#    state: mounted
#    src: proc
#    fstype: proc

# fstab
# ANSSI-BP-028 R28 - Typical partitioning
- name: Stat /etc/fstab.new
  tags:
    - fstab
    - check
  ansible.builtin.stat:
    path: /etc/fstab.new
  register: stat_result
- name: Create /etc/fstab.new
  tags: fstab
  become: true
  # For idempotence
  when: not stat_result.stat.exists
  block:
    - name: Create temp file for fstab.awk
      ansible.builtin.tempfile:
        state: file
        suffix: temp
      register: tempfile_1
    - name: Copy fstab.awk
      ansible.builtin.copy:
        src: fstab.awk
        dest: "{{ tempfile_1.path }}"
        owner: root
        group: root
        mode: '0600'
    - name: Install Gawk
      when: ansible_distribution == "Debian" or ansible_distribution == "Kali"
      ansible.builtin.apt:
        name: gawk
        update_cache: true
      tags:
        - packages
        - debian
    - name: Create /etc/fstab.new
      ansible.builtin.shell: gawk -f {{ tempfile_1.path }} /etc/fstab 1>/etc/fstab.new
      changed_when: true
    - name: Remove temp file
      ansible.builtin.file:
        path: "{{ tempfile_1.path }}"
        state: absent
# </fstab>

# Temp dirs
- name: Clean up /tmp during boot (Slackware)
  become: true
  when: ansible_distribution == "Slackware"
  tags:
    - configuration
    - slackware
  ansible.builtin.replace:
    path: /etc/rc.d/rc.S
    regexp: '^(rm -rf) /tmp/\{.+\}$'
    replace: 'shopt -s dotglob; \g<1> /tmp{,-inst}/*; shopt -u dotglob'
    validate: '/bin/grep "^shopt -s dotglob; rm -rf /tmp{,-inst}/\*; shopt -u dotglob$" %s'
    backup: true
- name: Debian systemd-tmpfiles
  become: true
  when: ansible_distribution == "Debian" or ansible_distribution == "Kali" or ansible_distribution == "Ubuntu"
  tags:
    - configuration
    - debian
  block:
    - name: mkdir /etc/tmpfiles.d
      ansible.builtin.file:
        path: /etc/tmpfiles.d
        state: directory
        owner: root
        group: root
        mode: '0755'
    - name: Clean up /tmp during boot (Debian)
      ansible.builtin.copy:
        src: tmp.conf.new
        dest: /etc/tmpfiles.d/tmp.conf
        mode: '0644'
        owner: root
        group: root

- name: Make Xorg rootless
  become: true
  when: ansible_distribution == "Slackware"
  tags:
    - permissions
    - slackware
  ansible.builtin.file:
    path: /usr/libexec/Xorg
    mode: '0755'
    owner: root
    group: root
  register: result
  failed_when:
    - result.failed == true
    - result.state != "absent"

# ANSSI-BP-028 R56 - Avoiding using executables with setuid and setgid rights
# ANSSI-BP-028 R57 - Avoiding using executables with setuid root and setgid root rights
- name: SUID bits
  become: true
  tags: permissions
  block:
    - name: Slackware
      when: ansible_distribution == "Slackware"
      tags: slackware
      block:
        - name: Ping
          block:
            - name: Install libcap package (Slackware)
              community.general.slackpkg:
                name: libcap
                state: present
                update_cache: true
              tags: packages
            - name: Set CAP_NET_RAW capability to /bin/ping
              community.general.capabilities:
                path: /bin/ping
                # See https://github.com/ansible-collections/community.general/issues/4067
                capability: cap_net_raw=ep
                state: present
            - name: Remove SUID bit from /bin/ping
              tags: suid
              ansible.builtin.file:
                path: /bin/ping
                mode: u-s
                owner: root
                group: root
        - name: Remove SUID & SGID bits from /usr/bin/at
          tags:
            - cron
            - suid
            - sgid
          ansible.builtin.file:
            path: /usr/bin/at
            mode: ug-s
            owner: root
            group: root
          register: result
          failed_when:
            - result.failed == true
            - result.state != "absent"
        - name: Remove SGID bits from /usr/bin/w{all,rite}
          tags: sgid
          ansible.builtin.file:
            path: '{{ item }}'
            mode: g-s
            owner: root
            group: root
          with_items:
            - /usr/bin/wall
            - /usr/bin/write
        - name: Remove SUID bit from /usr/libexec/xscreensaver/sonar
          tags: suid
          ansible.builtin.file:
            path: /usr/libexec/xscreensaver/sonar
            mode: u-s
            owner: root
            group: root
          register: result
          failed_when:
            - result.failed == true
            - result.state != "absent"
    - name: Remove SUID bit from /usr/bin/chfn
      tags: suid
      ansible.builtin.file:
        path: /usr/bin/chfn
        mode: u-s
        owner: root
        group: root
    - name: Remove SUID bit from ssh-keysign
      tags:
        - suid
        - ssh
      ansible.builtin.file:
        path: '{{ item }}'
        mode: u-s
        owner: root
        group: root
      with_items:
        - /usr/libexec/ssh-keysign # Slackware
        - /usr/lib/openssh/ssh-keysign # Debian
      register: result
      failed_when:
        - result.failed == true
        - result.state != "absent"
    # ksu = Kerberized super-user
    - name: Remove SUID bit from /{,usr/}bin/su & /usr/bin/ksu
      tags: suid
      ansible.builtin.file:
        path: '{{ item }}'
        mode: u-s
        owner: root
        group: root
      with_items:
        - /usr/bin/su # Debian
        - /bin/su # Slackware
        - /usr/bin/ksu
      register: result
      failed_when:
        - result.failed == true
        - result.state != "absent"
    - name: Remove SUID bits from /usr/bin/{gpasswd,newgrp}
      tags: suid
      ansible.builtin.file:
        path: '{{ item }}'
        mode: u-s
        owner: root
        group: root
      with_items:
        - /usr/bin/gpasswd
        - /usr/bin/newgrp

# ANSSI-BP-028 R50 - Limiting the rights to access sensitive files and directories
- name: Chmod sensitive files
  become: true
  block:
    - name: sudoers files
      ansible.builtin.import_tasks: filesystem-sudoers.yml
    - name: chmod wireless configurations
      ansible.builtin.file:
        path: /etc/{{ item }}
        mode: '0600'
        owner: root
        group: root
      with_items:
        - wpa_supplicant.conf
        - rc.d/rc.inet1.conf
        - rc.d/rc.wireless.conf
      register: result
      failed_when:
        - result.failed == true
        - result.state != "absent"
      tags: permissions
    - name: chmod Kerberos keytab
      ansible.builtin.file:
        path: /etc/krb5.keytab
        mode: '0600'
        owner: root
        group: root
      register: result
      failed_when:
        - result.failed == true
        - result.state != "absent"
      tags:
        - permissions
        - kerberos
    - name: chmod Kerberos KDC dir
      ansible.builtin.file:
        path: /var/kerberos/krb5kdc
        mode: '0700'
        owner: root
        group: root
      register: result
      failed_when:
        - result.failed == true
        - result.state != "absent"
      tags:
        - permissions
        - kerberos
    - name: Install acl package (Slackware)
      when: ansible_distribution == "Slackware"
      community.general.slackpkg:
        name: acl
        state: present
      tags:
        - packages
        - slackware
    # This provides setfacl
    - name: Install acl package (Debian)
      when: ansible_distribution == "Debian" or ansible_distribution == "Kali"
      ansible.builtin.apt:
        name: acl
        state: present
      tags:
        - packages
        - debian
        - permissions
    - name: chmod LDAP secrets
      ansible.builtin.file:
        path: "{{ item }}"
        mode: '0600'
        owner: root
        group: root
      with_items:
        # nss_ldap(5)
        - /etc/ldap.secret
        - /etc/libnss-ldap.secret
        # pam_ldap(5)
        - /etc/pam_ldap.secret
        - /etc/nslcd.conf
      register: result
      failed_when:
        - result.failed == true
        - result.state != "absent"
      tags: permissions
    - name: chmod /etc/ssl/private
      ansible.builtin.file:
        path: /etc/ssl/private
        mode: o-rwx
        owner: root
      tags: permissions
    # Partly CIS Debian 12 v1.1.0: 6.2.4.5 Ensure audit configuration files mode is configured
    - name: chmod audit files
      ansible.builtin.file:
        path: "{{ item }}"
        mode: '0700'
        owner: root
        group: root
      with_items:
        - /etc/audit
        - /var/log/audit
      register: result
      failed_when:
        - result.failed == true
        - result.state != "absent"
      tags:
        - permissions
        - logging
    # ANSSI-BP-028 R29 - Access restrictions on /boot
    - name: chmod /boot
      ansible.builtin.file:
        path: /boot
        mode: '0700'
        owner: root
        group: root
      register: result
      tags:
        - permissions
      failed_when:
        - result.failed
        - result.msg != "file (/boot) is absent, cannot continue"
    # Home directories
    - name: chmod /root
      ansible.builtin.file:
        path: /root
        mode: '0700'
        owner: root
        group: root
      tags: permissions
    - name: chmod Home dirs
      tags: permissions
      block:
        - name: getent passwd
          ansible.builtin.getent:
            database: passwd
          tags: check
        # https://www.debian.org/doc/manuals/securing-debian-manual/ch04s11.en.html#limit-user-perm
        - name: chmod home directories
          ansible.builtin.file:
            path: "{{ item.value[4] }}"
            mode: '0700'
          with_dict: "{{ getent_passwd }}"
          # UID_MIN & UID_MAX in /etc/login.defs
          when: item.value[1] | int >= 1000 and item.value[1] | int <= 60000
          register: result
          failed_when:
            - result.failed == true
            - result.state != "absent"
    # Stuff that is usually readable, but have no reason why they should be
    # CIS Debian Linux 12 Benchmark v1.1.0 - 5.1.1 Ensure permissions on /etc/ssh/sshd_config are configured
    # CIS Debian Linux 12 Benchmark v1.1.0 - 5.1.2 Ensure permissions on SSH private host key files are configured
    - name: chmod /etc/ssh/sshd_config and keys
      ansible.builtin.file:
        path: /etc/ssh/{{ item }}
        mode: '0600'
        owner: root
        group: root
      register: result
      failed_when:
        - result.failed == true
        - result.state != "absent"
      tags:
        - permissions
        - ssh
      with_items:
        - sshd_config
        - ssh_host_ecdsa_key
        - ssh_host_ed25519_key
        - ssh_host_rsa_key
        - ssh_host_dsa_key
    - name: chmod /etc/ssh/sshd_config.d
      ansible.builtin.file:
        path: /etc/ssh/sshd_config.d
        mode: '0700'
        owner: root
        group: root
      register: result
      failed_when:
        - result.failed == true
        - result.state != "absent"
      tags:
        - permissions
        - ssh
    - name: chmod boot loader configurations
      ansible.builtin.file:
        path: "{{ item }}"
        mode: og-rwx
        owner: root
        group: root
      with_items:
        - /etc/grub.d
        - /boot/grub/grub.cfg
        - /etc/default/grub
        - /etc/lilo.conf
      register: result
      failed_when:
        - result.failed == true
        - result.state != "absent"
      tags: permissions
    - name: chmod /etc/modprobe.d
      ansible.builtin.file:
        path: /etc/modprobe.d
        mode: '0700'
        owner: root
        group: root
      tags: permissions
      register: result
      # Might not exist in Docker containers etc.
      failed_when:
        - result.failed
        - result.msg != "file (/etc/modprobe.d) is absent, cannot continue"
    # Slackware Linux Benchmark v1.1 - 4.1 Network Parameter Modifications, 4.2 Additional Network Parameter Modifications & SN.8 Additional Kernel Tunings
    - name: chmod sysctl configurations
      ansible.builtin.file:
        path: "{{ item }}"
        mode: o-rwx
      with_items:
        - /etc/sysctl.conf
        - /etc/sysctl.d
      register: result
      failed_when:
        - result.failed == true
        - result.state != "absent"
      tags: permissions
    - name: chmod /etc/rc.d
      ansible.builtin.file:
        path: /etc/rc.d
        mode: '0700'
        owner: root
        group: root
      when: ansible_distribution == "Slackware"
      tags:
        - permissions
        - slackware
    # CIS Debian Linux 10 Benchmark v1.0.0
    #   5.1.2 Ensure permissions on /etc/crontab are configured
    #   5.1.3 Ensure permissions on /etc/cron.hourly are configured
    #   5.1.4 Ensure permissions on /etc/cron.daily are configured
    #   5.1.5 Ensure permissions on /etc/cron.weekly are configured
    #   5.1.6 Ensure permissions on /etc/cron.monthly are configured
    #   5.1.7 Ensure permissions on /etc/cron.d are configured
    - name: Restrict visibility to /etc/cron{tab,.{d,hourly,daily,weekly,monthly}/}
      ansible.builtin.file:
        path: /etc/{{ item }}
        mode: g-rwx,o-rwx
      with_items:
        - cron.d
        - cron.hourly
        - cron.daily
        - cron.weekly
        - cron.monthly
        - crontab
      register: result
      failed_when:
        - result.failed == true
        - result.state != "absent"
      tags:
        - permissions
        - cron
    - name: chmod /opt/microsoft/msedge/cron/microsoft-edge
      ansible.builtin.file:
        path: /opt/microsoft/msedge/cron/microsoft-edge
        mode: g-rwx,o-rwx
      register: result
      failed_when:
        - result.failed == true
        - result.state != "absent"
      tags:
        - permissions
        - cron
    # CIS Slackware Linux Benchmark v1.1 - 3.3 Disable GUI Login If Possible
    - name: chmod inittab
      when: ansible_distribution == "Slackware"
      ansible.builtin.file:
        path: /etc/inittab
        mode: '0600'
        owner: root
        group: root
      tags:
        - permissions
        - slackware
        - inittab
    # CIS Slackware Linux Benchmark v1.1 - 7.8 Restrict Root Logins To System Console
    - name: chmod /etc/securetty
      ansible.builtin.file:
        path: /etc/securetty
        mode: '0400'
        owner: root
        group: root
      # https://github.com/pyllyukko/harden.yml/issues/47
      register: result
      failed_when:
        - result.failed == true
        - result.state != "absent"
      tags: permissions
    - name: /etc/httpd o-rx
      when: ansible_distribution == "Slackware"
      ansible.builtin.file:
        path: /etc/httpd
        mode: '0750'
        owner: root
        group: apache
      register: result
      failed_when:
        - result.failed == true
        - result.state != "absent"
      tags:
        - permissions
        - slackware
    - name: chmod /etc/ntp.keys
      when: ansible_distribution == "Slackware"
      ansible.builtin.file:
        path: /etc/ntp.keys
        mode: '0640'
        owner: root
        group: ntp
      register: result
      failed_when:
        - result.failed == true
        - result.state != "absent"
      tags:
        - permissions
        - slackware
        - ntp

# Log files and dirs
- name: Log files and dirs
  become: true
  tags:
    - permissions
    - logging
  block:
    # we don't want to mess with the group ownerships because these might be needed to be writable by utmp group
    - name: Grant group adm read rights on login records
      ansible.posix.acl:
        path: "{{ item }}"
        entity: adm
        etype: group
        permissions: r
        state: present
      with_items:
        - /var/log/lastlog
        - /var/log/btmp
        - /var/log/wtmp
    - name: chmod o-rwx bunch of logs in /var/log/
      ansible.builtin.file:
        path: /var/log/{{ item }}
        mode: o-rwx
      with_items:
        # lastlog doesn't need to be readable for all users
        - lastlog
        # Stupid Citrix (ICA Client). Also has world-writable files there! 🙄
        - citrix
        # Slackware log dirs not owned by root
        - icecream
        - uucp
        # Debian installer https://www.debian.org/releases/stable/amd64/ch06s01.en.html
        - installer
        # chkrootkit (at least in Debian)
        - chkrootkit
        # System accounting
        - sysstat
        # VMware
        - vmware
      register: result
      failed_when:
        - result.failed == true
        - result.state != "absent"
    - name: chmod & chown /var/log/wtmp
      ansible.builtin.file:
        path: /var/log/wtmp
        mode: '0660'
        owner: root
        group: utmp
    - name: chmod o-r /var/log
      ansible.builtin.file:
        path: /var/log
        # apps that have own accounts & directories under /var/log need the x-bit (like freerad in Debian)
        mode: '0751'
        owner: root
        group: adm
    - name: Slackware pkgtools & sbopkg
      when: ansible_distribution == "Slackware"
      ansible.builtin.file:
        path: "{{ item }}"
        mode: '0750'
        owner: root
        group: adm
      with_items:
        - /var/log/pkgtools
        - /var/lib/pkgtools
        - /var/log/sbopkg
      register: result
      failed_when:
        - result.failed == true
        - result.state != "absent"
      tags: slackware
    # bzgrep 'var/log/.\+/$' MANIFEST.bz2
    - name: Slackware log dirs
      when: ansible_distribution == "Slackware"
      tags: slackware
      ansible.builtin.file:
        path: /var/log/{{ item }}
        mode: '0750'
        owner: root
        group: adm
      with_items:
        - httpd
        - nfsd
        - cups
        - samba
        - sa
        - iptraf-ng
      register: result
      failed_when:
        - result.failed == true
        - result.state != "absent"

- name: Print Lynis score for file permissions
  become: true
  tags: permissions
  when: run_lynis_after_hardening
  block:
    - name: Run Lynis test group file permissions
      ansible.builtin.command: lynis audit system -q --skip-plugins --tests-from-group file_permissions # noqa no-changed-when
      tags: check
    - name: slurp /var/log/lynis.log
      ansible.builtin.slurp:
        src: /var/log/lynis.log
      no_log: true
      register: lynis_log
    - name: Print Lynis score for file permissions
      ansible.builtin.debug:
        msg: "{{ lynis_log['content'] | b64decode | regex_search('Hardening index : \\[([0-9]+)\\]', '\\1', multiline=True) }}"
