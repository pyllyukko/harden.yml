---
# https://www.debian.org/doc/manuals/securing-debian-manual/ch04s11.en.html#id-1.5.14.10
# Regarding SHA_CRYPT_MIN_ROUNDS: https://github.com/linux-pam/linux-pam/issues/352
# ANSSI-BP-028 R36 - Changing the default value of UMASK
- name: Configure shadow password suite (generic)
  become: true
  ansible.builtin.replace:
    path: /etc/login.defs
    regexp: '^(# ?)?({{ item.key }}\s+)[^\s]+$'
    replace: '\g<2>{{ item.value }}'
    validate: '/bin/grep "^{{ item.key }}\s\+{{ item.value }}$" %s'
  with_dict: "{{ defs_common }}"
  vars:
    defs_common:
      LOG_OK_LOGINS: "yes"
      UMASK: "077"
      SULOG_FILE: "/var/log/sulog"
      CHFN_RESTRICT: "rwh"
      DEFAULT_HOME: "no"
      CREATE_HOME: "yes"
      HOME_MODE: "0700"
  tags:
    - configuration
    - logging
    - umask
# This is separated so you can run "ansible-playbook --tags passwords"
# AUTH-9286
# https://www.redhat.com/sysadmin/more-lockdown-controls:
#   * Minimum password lifetime
#   * Maximum password lifetime
#   * Failed login delay
# CIS Debian Linux 10 Benchmark v1.0.0:
#   5.4.1.1 Ensure password expiration is 365 days or less
#   5.4.1.2 Ensure minimum days between password changes is configured
#   5.4.1.3 Ensure password expiration warning days is 7 or more
# ANSSI-BP-028 R68 - Protecting the stored passwords
- name: Configure shadow password suite (password related)
  become: true
  ansible.builtin.replace:
    path: /etc/login.defs
    regexp: '^(# ?)?({{ item.key }}\s+)[^\s]+$'
    replace: '\g<2>{{ item.value }}'
    validate: '/bin/grep "^{{ item.key }}\s\+{{ item.value }}$" %s'
  with_dict:
    PASS_MAX_DAYS: "{{ pass_max_days }}"
    PASS_MIN_DAYS: "{{ pass_min_days }}"
    PASS_WARN_AGE: "{{ pass_warn_age }}"
    SHA_CRYPT_MIN_ROUNDS: "{{ crypt_rounds }}"
    ENCRYPT_METHOD: "{{ 'YESCRYPT' if ansible_distribution == 'Debian' else 'SHA512' }}"
    FAIL_DELAY: "{{ fail_delay }}"
    PREVENT_NO_AUTH: "yes"
    YESCRYPT_COST_FACTOR: 11
  tags:
    - configuration
    - passwords
# Required at least for getent
- name: Install glibc package (Slackware)
  when: ansible_distribution == "Slackware"
  become: true
  community.general.slackpkg:
    name: glibc
    state: present
    update_cache: true
  tags:
    - packages
    - slackware
# Slackware Linux Benchmark v1.1 - 7.8 Restrict Root Logins To System Console
# CIS Debian Linux 10 Benchmark v1.0.0 - 5.5 Ensure root login is restricted to system console
# https://www.debian.org/doc/manuals/securing-debian-manual/restrict-console-login.en.html
# https://github.com/pyllyukko/harden.yml/issues/47
- name: Limit the list of terminals from which root can log in (securetty)
  become: true
  ansible.builtin.copy:
    src: securetty.new
    dest: /etc/securetty
    owner: root
    group: root
    mode: '0400'
  tags:
    - configuration
    - authorization

# profile.d
- name: Create /etc/profile.d/expiry.sh
  become: true
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/newconfs/profile.d/{{ item }}.sh.new"
    dest: /etc/profile.d/{{ item }}.sh
    owner: root
    group: root
    mode: '0755'
  tags:
    - configuration
    - passwords
  with_items:
    - expiry
# CIS Debian Linux 10 Benchmark v1.0.0 - 5.4.5 Ensure default user shell timeout is 900 seconds or less
# Guide to the Secure Configuration of Red Hat Enterprise Linux 5 Revision 4.1 - 2.3.5.5 Implement Inactivity Time-out for Login Shells
# ANSSI-BP-028 R32 - Configuring a timeout on local user sessions
- name: Create /etc/profile.d/{tmout.sh,autologout.csh}
  become: true
  tags:
    - configuration
    - shells
    - timeout
  ansible.builtin.template:
    src: "{{ playbook_dir }}/templates/{{ item }}.j2"
    dest: /etc/profile.d/{{ item }}
    owner: root
    group: root
    mode: '0755'
  with_items:
    - tmout.sh
    - autologout.csh
# CIS Debian Linux 10 Benchmark v1.0.0 - 5.4.4 Ensure default user umask is 027 or more restrictive
# Slackware and CentOS have umask in /etc/profile
# ANSSI-BP-028 R36 - Changing the default value of UMASK
- name: Debian umask
  become: true
  tags:
    - configuration
    - debian
    - umask
  when: ansible_distribution == "Debian" or ansible_distribution == "Kali" or ansible_distribution == "Ubuntu"
  block:
    - name: Create /etc/profile.d/umask.sh (Debian)
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/newconfs/profile.d/umask.sh.new"
        dest: /etc/profile.d/umask.sh
        owner: root
        group: root
        mode: '0755'
    - name: Set umask in /etc/skel/.profile
      ansible.builtin.replace:
        path: /etc/skel/.profile
        regexp: '^#?(umask\s+)\d+$'
        replace: '\g<1>077'
        validate: '/bin/grep "^umask 077$" %s'
- name: Create /etc/profile.d/awk_sandboxing.sh
  become: true
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/newconfs/profile.d/awk_sandboxing.sh"
    dest: /etc/profile.d/awk_sandboxing.sh
    owner: root
    group: root
    mode: '0755'
  tags: configuration
# </profile.d>

# Slackware Linux Benchmark v1.1 - 7.3 Create ftpusers Files
# https://www.debian.org/doc/manuals/securing-debian-manual/ch04s11.en.html#id-1.5.14.12
- name: ftpusers
  tags:
    - configuration
    - authorization
    - network
  block:
    - name: getent passwd
      ansible.builtin.getent:
        database: passwd
      tags: check
    - name: Create /etc/ftpusers
      become: true
      ansible.builtin.template:
        src: "{{ playbook_dir }}/templates/ftpusers.j2"
        dest: /etc/ftpusers
        owner: root
        group: root
        mode: '0600'

- name: login_defs Slackware
  ansible.builtin.import_tasks: login_defs-slackware.yml
  when: ansible_distribution == "Slackware"
  tags: slackware

# CIS Debian Linux 10 Benchmark v1.0.0 - 6.2.17 Ensure no duplicate GIDs exist
- name: Verify integrity of group files
  become: true
  ansible.builtin.command: grpck -r
  tags: check
  changed_when: false

- name: Remove pi from adm group (Raspberry Pi OS)
  when: ansible_distribution == "Debian"
  become: true
  ansible.builtin.command: gpasswd -d pi adm
  register: result
  failed_when:
    - result.failed == true
    - '"is not a member of" not in result.stderr'
  changed_when:
    - '"is not a member of" not in result.stderr'
  tags:
    - accounts
    - debian

# The tasks below require *local* user accounts
- name: getent passwd
  tags:
    - accounts
    - passwords
    - authorization
    - check
  ansible.builtin.getent:
    database: passwd
    service: files
- name: Get login.defs values
  tags:
    - accounts
    - check
    - passwords
    - authorization
  block:
    - name: slurp /etc/login.defs
      become: true
      ansible.builtin.slurp:
        src: /etc/login.defs
      register: login_defs
      no_log: true
    - name: Set uid_min & uid_max variables
      ansible.builtin.set_fact:
        uid_min: "{{ login_defs['content'] | b64decode | regex_search('^UID_MIN\\s+([0-9]+)$', '\\1', multiline=True) | first }}"
        uid_max: "{{ login_defs['content'] | b64decode | regex_search('^UID_MAX\\s+([0-9]+)$', '\\1', multiline=True) | first }}"
    - name: Verify uid_min & uid_max values
      ansible.builtin.assert:
        that:
          - uid_min is regex('^[0-9]+$')
          - uid_max is regex('^[0-9]+$')
          - uid_min | int != 0
          - uid_max | int != 0

# CIS Debian Linux 10 Benchmark v1.0.0 - 5.4.1.4 Ensure inactive password lock is 30 days or less
# Debian's "useradd -D -f 30" fails with "cannot create new defaults file"
- name: Set the number of days after a password expires until the account is permanently disabled (inactive password lock)
  become: true
  tags:
    - passwords
    - authorization
    - configuration
  ansible.builtin.replace:
    path: /etc/default/useradd
    regexp: '^(# ?)?(INACTIVE=).*$'
    replace: '\g<2>{{ inactive_password_lock }}'
    validate: '/bin/grep "^INACTIVE={{ inactive_password_lock }}$" %s'

# CIS Debian Linux 10 Benchmark v1.0.0:
#   5.4.1.1 Ensure password expiration is 365 days or less
#   5.4.1.2 Ensure minimum days between password changes is configured
#   5.4.1.3 Ensure password expiration warning days is 7 or more
#   5.4.1.4 Ensure inactive password lock is 30 days or less
# ansible.builtin.user doesn't seem to be able to set inactive & warndays,
# so we'll use chage instead.
- name: Set password policies for existing users
  become: true
  ansible.builtin.command: chage --inactive {{ inactive_password_lock }} --mindays {{ pass_min_days }} --maxdays {{ pass_max_days }} --warndays {{ pass_warn_age }} {{ item.key }} # noqa yaml[line-length]
  changed_when: true
  when: item.value[1] | int >= uid_min | int and item.value[1] | int <= uid_max | int
  with_dict: "{{ getent_passwd }}"
  tags:
    - accounts
    - passwords
    - authorization

# CIS Debian Linux 10 Benchmark v1.0.0 - 5.4.2 Ensure system accounts are secured
# Slackware Linux Benchmark v1.1 - 8.1 Block System Accounts
# ANSSI-BP-028 R34 - Disabling the service accounts
- name: Lock system accounts
  ansible.builtin.user:
    name: '{{ item.key }}'
    # Nowadays Debian has a symlink /bin -> /usr/bin, so this should be fine
    shell: /sbin/nologin
    # pam_unix(account) will deny access if account is expired
    expires: '{{ 60 * 60 * 24 }}'
    password_lock: true
  # CIS Debian Benchmark also has accounts sync, shutdown & halt
  when:
    - item.value[1] | int < uid_min | int
    - (item.value[1] != "0" and item.key != "root")
    - item.key != "Debian-gdm"
    - item.key != "lightdm"
    - item.key != "daemon"
    - item.key != "logcheck"
  with_dict: "{{ getent_passwd }}"
  tags: accounts
  become: true
- name: Configure /etc/adduser.conf (Debian)
  become: true
  ansible.builtin.replace:
    path: /etc/adduser.conf
    regexp: '^({{ item.key }}=).*$'
    replace: '\g<1>{{ item.value }}'
    validate: '/bin/grep "^{{ item.key }}={{ item.value }}$" %s'
  when: ansible_distribution == "Debian" or ansible_distribution == "Kali" or ansible_distribution == "Ubuntu"
  tags:
    - configuration
    - debian
  with_dict:
    DIR_MODE: "0700"

# https://wiki.debian.org/SystemGroups
- name: Remove users from legacy groups
  tags: accounts
  block:
    - name: getent group
      ansible.builtin.getent:
        database: group
        service: files
      tags: check
    - name: Legacy groups
      become: true
      block:
        # Common groups
        - name: Remove almost all users from group "lp"
          ansible.builtin.command: gpasswd -d {{ item }} lp
          with_items: '{{ getent_group["lp"][2] | split(",") }}'
          register: result
          changed_when:
            - '"is not a member of" not in result.stderr'
          when:
            - '"lp" in getent_group'
            - getent_group["lp"][2] | length > 0
        - name: Remove all users from group "floppy"
          ansible.builtin.command: gpasswd -d {{ item }} floppy
          with_items: '{{ getent_group["floppy"][2] | split(",") }}'
          register: result
          changed_when:
            - '"is not a member of" not in result.stderr'
          when:
            - '"floppy" in getent_group'
            - getent_group["floppy"][2] | length > 0
        - name: Remove all users from group "cdrom"
          ansible.builtin.command: gpasswd -d {{ item }} cdrom
          with_items: '{{ getent_group["cdrom"][2] | split(",") }}'
          register: result
          changed_when:
            - '"is not a member of" not in result.stderr'
          when:
            - '"cdrom" in getent_group'
            - getent_group["cdrom"][2] | length > 0
        - name: Remove all users from group "games"
          ansible.builtin.command: gpasswd -d {{ item }} games
          with_items: '{{ getent_group["games"][2] | split(",") }}'
          register: result
          changed_when:
            - '"is not a member of" not in result.stderr'
          when:
            - '"games" in getent_group'
            - getent_group["games"][2] | length > 0
        - name: Remove almost all users from group "scanner"
          ansible.builtin.command: gpasswd -d {{ item }} scanner
          with_items: '{{ getent_group["scanner"][2] | split(",") }}'
          register: result
          changed_when:
            - '"is not a member of" not in result.stderr'
          when:
            - '"scanner" in getent_group'
            - getent_group["scanner"][2] | length > 0
            - item != "saned"
    # Debian specific groups
    - name: Debian specific groups
      become: true
      tags: debian
      when: ansible_distribution == "Debian" or ansible_distribution == "Kali" or ansible_distribution == "Ubuntu"
      block:
        - name: Remove all users from group "lpadmin"
          ansible.builtin.command: gpasswd -d {{ item }} lpadmin
          with_items: '{{ getent_group["lpadmin"][2] | split(",") }}'
          register: result
          changed_when:
            - '"is not a member of" not in result.stderr'
          when:
            - '"lpadmin" in getent_group'
            - getent_group["lpadmin"][2] | length > 0
        - name: Remove all users from group "dip"
          ansible.builtin.command: gpasswd -d {{ item }} dip
          with_items: '{{ getent_group["dip"][2] | split(",") }}'
          register: result
          changed_when:
            - '"is not a member of" not in result.stderr'
          when:
            - '"dip" in getent_group'
            - getent_group["dip"][2] | length > 0
    # Raspbian gpio, i2c & spi groups
    # https://www.raspberrypi.com/documentation/computers/os.html#permissions
    - name: Remove users from Raspberry Pi OS specific groups
      become: true
      when: ansible_distribution == "Debian"
      tags: debian
      block:
        - name: Remove all users from group "gpio"
          ansible.builtin.command: gpasswd -d {{ item }} gpio
          with_items: '{{ getent_group["gpio"][2] | split(",") }}'
          register: result
          changed_when:
            - '"is not a member of" not in result.stderr'
          when:
            - '"gpio" in getent_group'
            - getent_group["gpio"][2] | length > 0
        - name: Remove all users from group "i2c"
          ansible.builtin.command: gpasswd -d {{ item }} i2c
          with_items: '{{ getent_group["i2c"][2] | split(",") }}'
          register: result
          changed_when:
            - '"is not a member of" not in result.stderr'
          when:
            - '"i2c" in getent_group'
            - getent_group["i2c"][2] | length > 0
        - name: Remove all users from group "spi"
          ansible.builtin.command: gpasswd -d {{ item }} spi
          with_items: '{{ getent_group["spi"][2] | split(",") }}'
          register: result
          changed_when:
            - '"is not a member of" not in result.stderr'
          when:
            - '"spi" in getent_group'
            - getent_group["spi"][2] | length > 0

# Unfortunately the hash_rounds_min doesn't seem to work
#- name: Configure libuser.conf
#  become: true
#  when: ansible_os_family == "RedHat"
#  tags:
#    - centos
#    - configuration
#  community.general.ini_file:
#    path: /etc/libuser.conf
#    section: defaults
#    option: "{{ item.key }}"
#    value: "{{ item.value }}"
#    owner: root
#    group: root
#    mode: '0644'
#  with_dict:
#    hash_rounds_min: "{{ crypt_rounds }}"
#    crypt_style: sha512

# ANSSI-BP-028 R32 - Configuring a timeout on local user sessions
- name: Configure logind.conf
  tags:
    - configuration
    - timeout
  become: true
  community.general.ini_file:
    path: '{{ logind_conf_location }}'
    section: Login
    option: "{{ item.key }}"
    value: "{{ item.value }}"
    owner: root
    group: root
    mode: '0644'
    backup: true
  with_dict:
    IdleActionSec: '{{ session_timeout }}min'
    IdleAction: "lock"
