---
# System accounting
- name: sysstat
  tags:
    - sysstat
    - accounting
  block:
    - name: Install sysstat
      become: true
      when: ansible_distribution == "Debian" or ansible_distribution == "Kali" or ansible_distribution == "Ubuntu"
      ansible.builtin.apt:
        name: sysstat
        update_cache: true
      tags:
        - packages
        - services
        - debian
    - name: Enable system accounting in /etc/default/sysstat
      become: true
      when: ansible_distribution == "Debian" or ansible_distribution == "Kali" or ansible_distribution == "Ubuntu"
      ansible.builtin.replace:
        path: /etc/default/sysstat
        regexp: '^ENABLED=.*$'
        replace: 'ENABLED="true"'
        validate: '/bin/grep "^ENABLED=\"true\"$" %s'
      tags:
        - services
        - configuration
        - debian
    - name: Enable system accounting systemd service
      become: true
      when: ansible_distribution == "Debian" or ansible_distribution == "Kali" or ansible_distribution == "Ubuntu"
      ansible.builtin.service:
        name: sysstat
        state: started
        enabled: true
      tags:
        - services
        - configuration
        - debian
    - name: Install sysstat (Slackware)
      become: true
      when: ansible_distribution == "Slackware"
      community.general.slackpkg:
        name: sysstat
        state: present
        update_cache: true
      tags:
        - packages
        - services
        - slackware
    - name: Enable rc.sysstat (Slackware)
      become: true
      when: ansible_distribution == "Slackware"
      ansible.builtin.file:
        path: /etc/rc.d/rc.sysstat
        owner: root
        group: root
        mode: '0700'
      tags:
        - services
        - configuration
        - slackware
    # https://github.com/sysstat/sysstat/blob/master/cron/sysstat.crond.in
    # Ansible states that it's cron module requires "any 'vixie cron' conformant variant"
    # dcron states that "Our crontab format is roughly similar to that used by vixiecron."
    - name: Create sysstat cron jobs
      when: ansible_distribution == "Slackware"
      become: true
      tags:
        - services
        - configuration
        - slackware
      block:
        - name: Create cron job for sysstat activity accounting
          ansible.builtin.cron:
            name: "Run system activity accounting tool every 10 minutes"
            minute: "*/10"
            job: "if [ -x /usr/lib64/sa/sa1 ]; then /usr/lib64/sa/sa1 1 1; elif [ -x /usr/lib/sa/sa1 ]; then /usr/lib/sa/sa1 1 1; fi"
        - name: Create cron job for sysstat summary
          ansible.builtin.cron:
            name: "Generate a text summary of previous day process accounting at 00:07"
            minute: "7"
            hour: "0"
            job: "if [ -x /usr/lib64/sa/sa2 ]; then /usr/lib64/sa/sa2 -A; elif [ -x /usr/lib/sa/sa2 ]; then /usr/lib/sa/sa2 -A; fi"
    - name: Configure sysstat
      become: true
      ansible.builtin.replace:
        path: /etc/sysstat/sysstat
        regexp: '^HISTORY=[0-9]+$'
        replace: 'HISTORY=99999'
        validate: '/bin/grep "^HISTORY=99999$" %s'
      when: ansible_os_family != "RedHat"
      tags:
        - services
        - configuration
    #- name: Configure sysstat (RH)
    #  become: true
    #  when: ansible_os_family == "RedHat"
    #  ansible.builtin.replace:
    #    path: /etc/sysconfig/sysstat
    #    regexp: '^HISTORY=[0-9]+$'
    #    replace: 'HISTORY=99999'
    #    validate: '/bin/grep "^HISTORY=99999$" %s'
    #  tags:
    #    - services
    #    - configuration
    #    - centos
# </System accounting>

# Process accounting
- name: Install acct
  become: true
  when: ansible_distribution == "Debian" or ansible_distribution == "Kali" or ansible_distribution == "Ubuntu"
  ansible.builtin.apt:
    name: acct
    update_cache: true
  tags:
    - packages
    - services
    - accounting
    - debian
- name: Enable acct
  become: true
  when: ansible_distribution == "Debian" or ansible_distribution == "Kali" or ansible_distribution == "Ubuntu"
  ansible.builtin.systemd:
    name: acct
    state: started
    enabled: true
  tags:
    - services
    - accounting
    - configuration
    - debian
    - molecule-notest
- name: Install acct (Slackware)
  become: true
  when: ansible_distribution == "Slackware"
  community.general.slackpkg:
    name: acct
    state: present
  tags:
    - packages
    - services
    - accounting
    - slackware
- name: Create /var/log/pacct (Slackware)
  become: true
  when: ansible_distribution == "Slackware"
  ansible.builtin.copy:
    content: ""
    dest: /var/log/pacct
    force: false
    owner: root
    group: adm
    mode: '0640'
  tags:
    - services
    - accounting
    - slackware
- name: Create /etc/logrotate.d/pacct (Slackware)
  become: true
  when: ansible_distribution == "Slackware"
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/newconfs/logrotate.d/pacct.new"
    dest: /etc/logrotate.d/pacct
    owner: root
    group: root
    mode: '0600'
  tags:
    - services
    - accounting
    - slackware
- name: Start process accounting (Slackware)
  become: true
  when: ansible_distribution == "Slackware"
  ansible.builtin.command: /sbin/accton /var/log/pacct
  register: result
  changed_when:
    - '"Turning on process accounting" in result.stdout'
  tags:
    - services
    - accounting
    - slackware
    - molecule-notest
# </Process accounting>
# systemd IP accounting
# https://0pointer.net/blog/ip-accounting-and-access-lists-with-systemd.html
- name: Enable systemd IP accounting in certain services
  become: true
  tags:
    - accounting
    - configuration
    - debian
    - molecule-notest
  when: ansible_distribution == "Debian" or ansible_distribution == "Kali" or ansible_distribution == "Ubuntu"
  notify: Run systemctl daemon-reload
  community.general.ini_file:
    path: /lib/systemd/system/{{ item }}.service
    section: Service
    option: IPAccounting
    value: "yes"
    create: false
    no_extra_spaces: true
  with_items:
    - ssh
    - mpd
    - collectd
    - rsyslog
    - clamav-freshclam
    - systemd-timesyncd
    - unattended-upgrades
    - tor
    - autofs
    - ooniprobe-cli
  register: result
  failed_when:
    - result.failed == true
    - '"service does not exist!" not in result.msg'
- name: Print Lynis score for accounting
  become: true
  tags: accounting
  when: run_lynis_after_hardening
  block:
    - name: Run Lynis test group accounting
      ansible.builtin.command: lynis audit system -q --skip-plugins --tests-from-group accounting # noqa no-changed-when
      tags: check
    - name: slurp /var/log/lynis.log
      ansible.builtin.slurp:
        src: /var/log/lynis.log
      register: lynis_log
    - name: Print Lynis score for accounting
      ansible.builtin.debug:
        msg: "{{ lynis_log['content'] | b64decode | regex_search('Hardening index : \\[([0-9]+)\\]', '\\1', multiline=True) }}"
